/* tslint:disable */
/* eslint-disable */
/**
 * Twenty Api
 * This is a **Twenty REST/API** playground based on the **OpenAPI 3.1 specification**.
 *
 * The version of the OpenAPI document: v0.1
 * Contact: felix@twenty.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateOneField200Response } from '../model';
// @ts-ignore
import type { DeleteOneField200Response } from '../model';
// @ts-ignore
import type { Field } from '../model';
// @ts-ignore
import type { FieldForUpdate } from '../model';
// @ts-ignore
import type { FieldsGet200Response } from '../model';
// @ts-ignore
import type { FieldsIdGet200Response } from '../model';
// @ts-ignore
import type { InlineObject } from '../model';
// @ts-ignore
import type { InlineObject1 } from '../model';
// @ts-ignore
import type { UpdateOneField200Response } from '../model';
/**
 * FieldsApi - axios parameter creator
 * @export
 */
export const FieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create One field
         * @param {Field} field body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneField: async (field: Field, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'field' is not null or undefined
            assertParamExists('createOneField', 'field', field)
            const localVarPath = `/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(field, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneField: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOneField', 'id', id)
            const localVarPath = `/fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find Many fields
         * @param {number} [limit] Limits the number of objects returned.
         * @param {string} [startingAfter] Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {string} [endingBefore] Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsGet: async (limit?: number, startingAfter?: string, endingBefore?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fieldsIdGet', 'id', id)
            const localVarPath = `/fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update One field
         * @param {string} id Object id.
         * @param {FieldForUpdate} fieldForUpdate body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneField: async (id: string, fieldForUpdate: FieldForUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOneField', 'id', id)
            // verify required parameter 'fieldForUpdate' is not null or undefined
            assertParamExists('updateOneField', 'fieldForUpdate', fieldForUpdate)
            const localVarPath = `/fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fieldForUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FieldsApi - functional programming interface
 * @export
 */
export const FieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create One field
         * @param {Field} field body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneField(field: Field, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneField200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneField(field, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.createOneField']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneField(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteOneField200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneField(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.deleteOneField']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find Many fields
         * @param {number} [limit] Limits the number of objects returned.
         * @param {string} [startingAfter] Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {string} [endingBefore] Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fieldsGet(limit?: number, startingAfter?: string, endingBefore?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsGet(limit, startingAfter, endingBefore, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.fieldsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fieldsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fieldsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.fieldsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update One field
         * @param {string} id Object id.
         * @param {FieldForUpdate} fieldForUpdate body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOneField(id: string, fieldForUpdate: FieldForUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOneField200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneField(id, fieldForUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.updateOneField']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FieldsApi - factory interface
 * @export
 */
export const FieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FieldsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create One field
         * @param {Field} field body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneField(field: Field, options?: RawAxiosRequestConfig): AxiosPromise<CreateOneField200Response> {
            return localVarFp.createOneField(field, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneField(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteOneField200Response> {
            return localVarFp.deleteOneField(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find Many fields
         * @param {number} [limit] Limits the number of objects returned.
         * @param {string} [startingAfter] Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {string} [endingBefore] Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsGet(limit?: number, startingAfter?: string, endingBefore?: string, options?: RawAxiosRequestConfig): AxiosPromise<FieldsGet200Response> {
            return localVarFp.fieldsGet(limit, startingAfter, endingBefore, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find One field
         * @param {string} id Object id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fieldsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FieldsIdGet200Response> {
            return localVarFp.fieldsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update One field
         * @param {string} id Object id.
         * @param {FieldForUpdate} fieldForUpdate body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOneField(id: string, fieldForUpdate: FieldForUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOneField200Response> {
            return localVarFp.updateOneField(id, fieldForUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
export class FieldsApi extends BaseAPI {
    /**
     * 
     * @summary Create One field
     * @param {Field} field body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public createOneField(field: Field, options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).createOneField(field, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete One field
     * @param {string} id Object id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public deleteOneField(id: string, options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).deleteOneField(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find Many fields
     * @param {number} [limit] Limits the number of objects returned.
     * @param {string} [startingAfter] Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
     * @param {string} [endingBefore] Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public fieldsGet(limit?: number, startingAfter?: string, endingBefore?: string, options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).fieldsGet(limit, startingAfter, endingBefore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find One field
     * @param {string} id Object id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public fieldsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).fieldsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update One field
     * @param {string} id Object id.
     * @param {FieldForUpdate} fieldForUpdate body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public updateOneField(id: string, fieldForUpdate: FieldForUpdate, options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).updateOneField(id, fieldForUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

